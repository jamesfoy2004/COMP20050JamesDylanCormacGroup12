package comp20050.hexagonalboard;

//Mockito requires maven. Project will migrate to maven during or after sprint 4 upon completion of code while we are compressing and shrinking the size of the project.

//Maven dependencies for mockito.
//<dependencies>
//    <dependency>
//        <groupId>org.junit.jupiter</groupId>
//        <artifactId>junit-jupiter</artifactId>
//        <version>5.10.0</version>
//        <scope>test</scope>
//    </dependency>
//    <dependency>
//        <groupId>org.mockito</groupId>
//        <artifactId>mockito-core</artifactId>
//        <version>5.10.0</version>
//        <scope>test</scope>
//    </dependency>
//</dependencies>v
//^^Generated by ChatGPT last December for a seperate assignment (Object oriented Programing Ass. 2)

/*import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.io.File;
import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;

public class SerialiseObjectsTest {

    @Test
    public void testSaveAndLoadBoard_MockedCells() {
        Cell[] originalBoard = new Cell[32];
        for (int i = 0; i < 32; i++) {
            Cell mockCell = Mockito.mock(Cell.class);
            Mockito.when(mockCell.toString()).thenReturn("Cell-" + (i + 1));
            originalBoard[i] = new Cell(String.valueOf(i + 1), "Red");
        }

        saveBoardForTest(originalBoard);

        Cell[] loadedBoard = loadBoardForTest();

        assertNotNull(loadedBoard);
        assertEquals(originalBoard.length, loadedBoard.length);

        for (int i = 0; i < originalBoard.length; i++) {
            assertEquals(originalBoard[i].toString(), loadedBoard[i].toString());
        }

        new File("Save1.ser").delete();
    }

    private void saveBoardForTest(Cell[] board) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("Save1.ser"))) {
            oos.writeObject(board);
        } catch (Exception e) {
            fail("Failed to save board: " + e.getMessage());
        }
    }

    private Cell[] loadBoardForTest() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("Save1.ser"))) {
            return (Cell[]) ois.readObject();
        } catch (Exception e) {
            fail("Failed to load board: " + e.getMessage());
            return null;
        }
    }
}
*/
